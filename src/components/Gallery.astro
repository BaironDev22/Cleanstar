---
// Componente de galería para mostrar trabajos de detailing
import OptimizedImage from './OptimizedImage.astro';

export interface GalleryImage {
  src: string;
  alt: string;
  title: string;
  category: 'detailing' | 'ceramico' | 'interior' | 'exterior' | 'premium';
  description?: string;
}

export interface Props {
  images: GalleryImage[];
  title?: string;
  showFilters?: boolean;
  columns?: number;
}

const {
  images = [],
  title = "Galería de Trabajos",
  showFilters = true,
  columns = 3
} = Astro.props;

// Get unique categories for filter buttons
const categories = [...new Set(images.map(img => img.category))];
---

<section class="gallery-section relative overflow-hidden" id="galeria">
  <!-- Background Pattern -->
  <div class="absolute inset-0 bg-pattern opacity-5">
    <div class="absolute inset-0" style="background-image: radial-gradient(circle at 30% 70%, white 1px, transparent 1px); background-size: 40px 40px;"></div>
  </div>

  <div class="container mx-auto px-4 py-16 relative z-10">
    <!-- Gallery Header -->
    <div class="text-center mb-12">
      <h2 class="text-4xl font-bold mb-4" style="color: var(--color1)">
        {title}
      </h2>
      <p class="text-lg max-w-2xl mx-auto" style="color: var(--color2)">
        Descubre la calidad de nuestro trabajo a través de estos ejemplos de nuestros servicios de detailing automotriz
      </p>
    </div>

    <!-- Filter Buttons -->
    {showFilters && (
      <div class="filter-buttons flex flex-wrap justify-center gap-3 mb-8">
        <button 
          class="filter-btn active px-6 py-2 rounded-full font-medium transition-all duration-300"
          data-filter="all"
          style="background: linear-gradient(135deg, var(--color4) 0%, var(--color3) 100%); color: white;"
        >
          Todos
        </button>
        {categories.map(category => (
          <button 
            class="filter-btn px-6 py-2 rounded-full font-medium transition-all duration-300"
            data-filter={category}
            style="border: 2px solid var(--color4); color: var(--color4);"
          >
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </button>
        ))}
      </div>
    )}

    <!-- Gallery Grid -->
    <div 
      class="gallery-grid"
      style={`grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); grid-template-columns: repeat(${columns}, 1fr);`}
    >
      {images.map((image, index) => (
        <div 
          class="gallery-item"
          data-category={image.category}
          data-index={index}
        >
          <div class="image-container relative overflow-hidden rounded-lg group cursor-pointer">
            <OptimizedImage
              src={image.src}
              alt={image.alt}
              class="gallery-image w-full h-64 object-cover transition-transform duration-500 group-hover:scale-110"
              loading="lazy"
              width={400}
              height={300}
            />
            
            <!-- Overlay -->
            <div class="overlay absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-70 transition-all duration-300 flex items-center justify-center">
              <div class="overlay-content text-center text-white transform translate-y-8 group-hover:translate-y-0 opacity-0 group-hover:opacity-100 transition-all duration-300">
                <h3 class="text-xl font-bold mb-2">{image.title}</h3>
                {image.description && (
                  <p class="text-sm mb-4">{image.description}</p>
                )}
                <button 
                  class="view-btn px-4 py-2 rounded-lg font-medium"
                  style="background: linear-gradient(135deg, var(--color4) 0%, var(--color3) 100%);"
                >
                  Ver Detalle
                </button>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- No results message -->
    <div class="no-results hidden text-center py-12">
      <p class="text-lg" style="color: var(--color2)">
        No se encontraron imágenes para esta categoría
      </p>
    </div>
  </div>
</section>

<!-- Image Modal -->
<div id="image-modal" class="modal fixed inset-0 bg-black bg-opacity-90 z-50 hidden items-center justify-center p-4">
  <div class="modal-content relative max-w-4xl max-h-full">
    <button 
      id="close-modal"
      class="absolute top-4 right-4 text-white text-3xl hover:text-gray-300 z-10"
      style="color: var(--color2)"
    >
      ×
    </button>
    <img id="modal-image" class="max-w-full max-h-full object-contain rounded-lg" />
    <div class="modal-info absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white p-4 rounded-b-lg">
      <h3 id="modal-title" class="text-xl font-bold mb-2"></h3>
      <p id="modal-description" class="text-sm"></p>
    </div>
  </div>
</div>

<style>
.gallery-section {
  min-height: 100vh;
}

.gallery-grid {
  display: grid;
  gap: 1.5rem;
  margin: 2rem 0;
}

.gallery-item {
  opacity: 1;
  transform: scale(1);
  transition: all 0.3s ease;
}

.gallery-item.hidden {
  opacity: 0;
  transform: scale(0.8);
  pointer-events: none;
}

.filter-btn {
  border: 2px solid transparent;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
}

.filter-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.filter-btn.active {
  background: linear-gradient(135deg, var(--color4) 0%, var(--color3) 100%) !important;
  color: white !important;
  border-color: transparent !important;
}

.image-container {
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
  transition: all 0.3s ease;
}

.image-container:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
  transform: translateY(-5px);
}

.modal {
  backdrop-filter: blur(8px);
  display: flex;
}

.modal.hidden {
  display: none;
}

.modal-content {
  animation: modalFadeIn 0.3s ease-out;
}

@keyframes modalFadeIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@media (max-width: 768px) {
  .gallery-grid {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)) !important;
    gap: 1rem;
  }
  
  .filter-buttons {
    flex-direction: column;
    align-items: center;
  }
  
  .filter-btn {
    width: 200px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const filterButtons = document.querySelectorAll('.filter-btn');
  const galleryItems = document.querySelectorAll('.gallery-item');
  const modal = document.getElementById('image-modal');
  const modalImage = document.getElementById('modal-image');
  const modalTitle = document.getElementById('modal-title');
  const modalDescription = document.getElementById('modal-description');
  const closeModal = document.getElementById('close-modal');
  const noResults = document.querySelector('.no-results');

  // Filter functionality
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.getAttribute('data-filter');
      
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      
      // Filter items
      let visibleCount = 0;
      galleryItems.forEach(item => {
        const category = item.getAttribute('data-category');
        
        if (filter === 'all' || category === filter) {
          item.classList.remove('hidden');
          visibleCount++;
        } else {
          item.classList.add('hidden');
        }
      });
      
      // Show/hide no results message
      if (visibleCount === 0) {
        noResults?.classList.remove('hidden');
      } else {
        noResults?.classList.add('hidden');
      }
    });
  });

  // Modal functionality
  galleryItems.forEach((item, index) => {
    const imageContainer = item.querySelector('.image-container');
    
    imageContainer?.addEventListener('click', () => {
      const img = item.querySelector('img') as HTMLImageElement;
      const title = item.querySelector('h3')?.textContent || '';
      const description = item.querySelector('.overlay-content p')?.textContent || '';
      
      if (modalImage && modalTitle && modalDescription && modal) {
        const modalImageElement = modalImage as HTMLImageElement;
        modalImageElement.src = img?.src || '';
        modalImageElement.alt = img?.alt || '';
        modalTitle.textContent = title;
        modalDescription.textContent = description;
        
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    });
  });

  // Close modal
  closeModal?.addEventListener('click', () => {
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  });

  // Close modal on outside click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal && modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  });

  // Close modal on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  });
});
</script>
